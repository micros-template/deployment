# Map for WebSocket connection upgrades
events {}
http {
  log_format syslog_format '$remote_addr\t'
  '$request_method\t'
  '$status\t'
  '$request_completion\t'
  '$request_time\t'
  '$request_length\t'
  '$bytes_sent\t'
  '$request_uri';

  # Change <sysy-url> to the address of sysy app
  # (service name in docker or ip address)
  # and configured sysy port that run syslog server (default :5140)
  access_log syslog:server=prometheus-nginx-exporter:5140,nohostname syslog_format;

  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  # Redirect HTTP to HTTPS
  server {
    listen 80;
    server_name nginx-proxy;

    location /nginx_status {
      stub_status;
      allow all;
    }
  }

  # HTTPS server
  server {
    listen 443 ssl;
    http2 on;
    server_name nginx-proxy;

    # Real IP configuration for Docker/Proxy
    set_real_ip_from 0.0.0.0/0;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;

    # SSL certificate
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;

    # SSL security settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    client_max_body_size 15m;

    # auth docs
    location /api/v1/auth/docs/ {
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Headers * always;
        add_header Access-Control-Allow-Methods * always;
        return 204;
      }
      proxy_pass https://auth_service/swagger/;
    }

    # user docs
    location /api/v1/user/docs/ {
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Headers * always;
        add_header Access-Control-Allow-Methods * always;
        return 204;
      }
      proxy_pass https://user_service/swagger/;
    }

    # Grafana
    location /grafana/ {
      proxy_pass http://grafana:3000/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # WebSocket support
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_cache_bypass $http_upgrade;
    }

    # VictoriaLogs UI
    location /vlogs/ {
      proxy_pass http://victorialogs:9428/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    # VictoriaMetrics UI
    location /vm/ {
      proxy_pass http://victoriametrics:8428/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Auth API
    location /api/v1/auth/ {
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Headers * always;
        add_header Access-Control-Allow-Methods * always;
        return 204;
      }
      proxy_pass https://auth_service/;
    }

    # Public image route
    location /api/v1/image/ {
      proxy_pass http://minio/;
    }

    # Auth middleware
    location /auth_middleware {
      internal;
      proxy_pass_request_body off;
      proxy_set_header Content-Length "";
      proxy_method POST;
      proxy_set_header Authorization $http_authorization;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass https://auth_service/verify;
    }

    # Protected API routes
    location /api/ {
      auth_request /auth_middleware;
      auth_request_set $backend_status $upstream_status;
      auth_request_set $user_data $sent_http_user_data;
      proxy_set_header User-Data $user_data;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # Notification WebSocket
      location /api/v1/notification/ {
        proxy_pass https://nats/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_cache_bypass $http_upgrade;
      }

      # User service
      location /api/v1/user/ {
        if ($request_method = OPTIONS) {
          add_header Access-Control-Allow-Origin $http_origin always;
          add_header Access-Control-Allow-Credentials true always;
          add_header Access-Control-Allow-Headers * always;
          add_header Access-Control-Allow-Methods * always;
          return 204;
        }
        proxy_pass https://user_service/;
      }

      # File service
      # location /api/v1/file/ {
      #   if ($request_method = OPTIONS) {
      #     add_header Access-Control-Allow-Origin $http_origin always;
      #     add_header Access-Control-Allow-Credentials true always;
      #     add_header Access-Control-Allow-Headers * always;
      #     add_header Access-Control-Allow-Methods * always;
      #     return 204;
      #   }
      #   proxy_pass http://file_service/;
      # }
    }

    # Optional frontend route
    # location / {
    #     proxy_pass http://frontend/;
    # }

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
  }
}
