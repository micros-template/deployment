# Map for WebSocket connection upgrades
map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

server {
  listen 80;
  http2 on;
  server_name nginx-proxy;

  client_max_body_size 10m;

  location /nginx_status {
    stub_status;
    allow all;
  }

  # docs
  location /api/v1/auth/docs/ {
    if ($request_method = OPTIONS) {
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Credentials true always;
      add_header Access-Control-Allow-Headers * always;
      add_header Access-Control-Allow-Methods * always;
      return 204;
    }
    proxy_pass http://auth_service/swagger/;
  }

  location /api/v1/user/docs/ {
    if ($request_method = OPTIONS) {
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Credentials true always;
      add_header Access-Control-Allow-Headers * always;
      add_header Access-Control-Allow-Methods * always;
      return 204;
    }
    proxy_pass http://auth_service/swagger/;
  }

  # Grafana
  location /grafana/ {
    proxy_pass http://grafana:3000/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # WebSocket support for Grafana live features
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_cache_bypass $http_upgrade;
  }

  # auth_middleware
  location /auth_middleware {
    internal;
    proxy_pass_request_body off;
    proxy_set_header Content-Length "";
    proxy_method POST;
    proxy_set_header Authorization $http_authorization;
    proxy_pass http://auth_service/verify;
  }

  # auth route
  location /api/v1/auth/ {
    if ($request_method = OPTIONS) {
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Credentials true always;
      add_header Access-Control-Allow-Headers * always;
      add_header Access-Control-Allow-Methods * always;
      return 204;
    }
    proxy_pass http://auth_service/;
  }

  # image public route
  location /api/v1/image/ {
    proxy_pass http://minio/;
  }


  # Protected route
  location /api/ {
    auth_request /auth_middleware;

    auth_request_set $backend_status $upstream_status;
    auth_request_set $user_data $sent_http_user_data;
    proxy_set_header User-Data $user_data;

    # handle websocket connetion to notification
    location /api/v1/notification/ {
      proxy_pass http://nats:8080/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    # User route
    location /api/v1/user/ {
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Headers * always;
        add_header Access-Control-Allow-Methods * always;
        return 204;
      }
      proxy_pass http://user_service/;
    }

    # File Route
    location /api/v1/file/ {
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Headers * always;
        add_header Access-Control-Allow-Methods * always;
        return 204;
      }
      proxy_pass http://file_service/;
    }
  }
  # location / {
  #   proxy_pass http://frontend/;
  # }
}